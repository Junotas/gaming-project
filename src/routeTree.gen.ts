/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SnakeImport } from './routes/snake'
import { Route as MoleImport } from './routes/mole'
import { Route as MemoryImport } from './routes/memory'
import { Route as TicTacToeImport } from './routes/TicTacToe'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SnakeRoute = SnakeImport.update({
  id: '/snake',
  path: '/snake',
  getParentRoute: () => rootRoute,
} as any)

const MoleRoute = MoleImport.update({
  id: '/mole',
  path: '/mole',
  getParentRoute: () => rootRoute,
} as any)

const MemoryRoute = MemoryImport.update({
  id: '/memory',
  path: '/memory',
  getParentRoute: () => rootRoute,
} as any)

const TicTacToeRoute = TicTacToeImport.update({
  id: '/TicTacToe',
  path: '/TicTacToe',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/TicTacToe': {
      id: '/TicTacToe'
      path: '/TicTacToe'
      fullPath: '/TicTacToe'
      preLoaderRoute: typeof TicTacToeImport
      parentRoute: typeof rootRoute
    }
    '/memory': {
      id: '/memory'
      path: '/memory'
      fullPath: '/memory'
      preLoaderRoute: typeof MemoryImport
      parentRoute: typeof rootRoute
    }
    '/mole': {
      id: '/mole'
      path: '/mole'
      fullPath: '/mole'
      preLoaderRoute: typeof MoleImport
      parentRoute: typeof rootRoute
    }
    '/snake': {
      id: '/snake'
      path: '/snake'
      fullPath: '/snake'
      preLoaderRoute: typeof SnakeImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/TicTacToe': typeof TicTacToeRoute
  '/memory': typeof MemoryRoute
  '/mole': typeof MoleRoute
  '/snake': typeof SnakeRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/TicTacToe': typeof TicTacToeRoute
  '/memory': typeof MemoryRoute
  '/mole': typeof MoleRoute
  '/snake': typeof SnakeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/TicTacToe': typeof TicTacToeRoute
  '/memory': typeof MemoryRoute
  '/mole': typeof MoleRoute
  '/snake': typeof SnakeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/TicTacToe' | '/memory' | '/mole' | '/snake'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/TicTacToe' | '/memory' | '/mole' | '/snake'
  id: '__root__' | '/' | '/TicTacToe' | '/memory' | '/mole' | '/snake'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TicTacToeRoute: typeof TicTacToeRoute
  MemoryRoute: typeof MemoryRoute
  MoleRoute: typeof MoleRoute
  SnakeRoute: typeof SnakeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TicTacToeRoute: TicTacToeRoute,
  MemoryRoute: MemoryRoute,
  MoleRoute: MoleRoute,
  SnakeRoute: SnakeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/TicTacToe",
        "/memory",
        "/mole",
        "/snake"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/TicTacToe": {
      "filePath": "TicTacToe.tsx"
    },
    "/memory": {
      "filePath": "memory.tsx"
    },
    "/mole": {
      "filePath": "mole.tsx"
    },
    "/snake": {
      "filePath": "snake.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
